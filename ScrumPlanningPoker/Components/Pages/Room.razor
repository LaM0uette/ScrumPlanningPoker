@page "/room/{RoomName}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Position = MudBlazor.Position
@using ScrumPlanningPoker.Entity.Cards
@inherits RoomBase

<title>Planning Poker - Room</title>

<div class="page @ThemeState.ClassCss">
    
    <ThemeToggle/>

    @if (!RoomIsValid)
    {
        <div class="container">

            <h1 class="title">Join game</h1>

            <div class="user-form_input-container">
                <label for="username">Enter your name</label>
                <input class="user-form_input-container--input" id="username" @bind-value="@UserName"/>
            </div>

            <div class="user-form_toggle-container">
                <MudSwitch @bind-Checked="@IsSpectator" Color="Color.Warning"/>
                <label>Join as spectator</label>
            </div>

            <button class="action-button" @onclick="JoinRoom">Join</button>

        </div>
    }
    else
    {
        <div class="main-layout_horizontal-flex">

            <div class="card-layout_container">

                @if (CurrentUser.IsSpectator || CardsIsRevealed)
                {
                    <div class="spectator-layout">

                        <div class="spectator-layout_user">
                            @{
                                var users = Users.Where(u => !u.IsSpectator).ToList();
                                var usersCountHasCard = users.Count(u => u.CardValue.HasValue);
                                var usersCount = users.Count;

                                var ienumerable = users.Where(u => u.CardValue.HasValue).Select(u => u.CardValue);
                                var usersCardsAverage = Card.CalculateAverage(ienumerable);
                            }

                            @if (!CardsIsRevealed)
                            {
                                <h2 class="subtitle">Votes: @usersCountHasCard / @usersCount</h2>
                            }
                            else
                            {
                                //ienumerable = new List<int?>() {5, 5, 5, 6, 12, 12};

                                var grouped = ienumerable.GroupBy(x => x)
                                    .Select(group => new {Value = group.Key, Count = group.Count()})
                                    .ToList();

                                var counts = grouped.Select(g => (double) g.Count).ToArray();
                                var values = grouped.Select(g => Card.GetCardValueString(g.Value)).ToArray();

                                <MudChart ChartType="ChartType.Pie" InputData="@counts"
                                          LegendPosition="Position.Right" InputLabels="@values"
                                          ChartOptions="PieChartOptions"
                                          Width="200px" Height="200px">
                                    
                                    <CustomGraphics>
                                        <style>
                                        
                                            .mud-chart-legend-item {
                                                display: flex;
                                                align-items: center;
                                                justify-content: center;
                                            }
                                        
                                            .mud-typography-display-inline {
                                                color: var(--secondary-color);
                                                font-size: 2em;
                                                font-weight: bold;
                                            }
                                            
                                            .mud-chart-legend-marker {
                                                height: 20px;
                                                width: 20px;
                                                margin: 0 4px 0 15px;
                                            }
                                            
                                        </style>
                                    </CustomGraphics>
                                    
                                </MudChart>

                                <h2 class="subtitle spectator-layout_suggested-note">Suggested note: @usersCardsAverage</h2>
                            }
                        </div>

                        @if (CurrentUser.IsSpectator)
                        {
                            @if (!CardsIsRevealed)
                            {
                                <button class="action-button" @onclick="RevealCards">Reveal cards</button>
                            }
                            else
                            {
                                <button class="action-button" @onclick="NewGame">Start new game</button>
                            }
                        }

                    </div>
                }
                else
                {
                    <div class="card-layout_cards">
                        @foreach (var card in Card.Cards)
                        {
                            <button class="card-layout_cards--card @GetCardCssClass((int) card.Key)" @onclick="() => ClickOnCard((int) card.Key)">

                                <p class="card-layout_cards--tiny-card tiny-card-value-top">@card.Value</p>

                                <div class="card-layout_inner-card">
                                    <p>@card.Value</p>
                                </div>

                                <p class="card-layout_cards--tiny-card tiny-card-value-bottom">@card.Value</p>

                            </button>
                        }
                    </div>
                }

            </div>

            <div class="clients-layout">

                <div class="clients-layout_users-list">

                    <div class="clients-layout_users-title-container">
                        <h2 class="subtitle clients-layout_users-title">Users</h2>
                    </div>

                    @foreach (var user in Users)
                    {
                        @if (!user.IsSpectator)
                        {
                            <div class="clients-layout_user-title-card">

                                <div class="user-title-card_info">

                                    <h3 class="user-title-card_name">@user.Name</h3>

                                    @if (user.CardValue.HasValue)
                                    {
                                        <img src="icons/check.png" alt="check"/>
                                    }

                                </div>

                                <div class="clients-layout_user-note">

                                    @if (CardsIsRevealed)
                                    {
                                        <p class="user-note_text">@Card.GetCardValueString(user.CardValue)</p>
                                    }

                                </div>
                            </div>
                        }
                    }

                </div>

                <div style="margin-bottom: 25px;"></div>

                <div class="clients-layout_users-list spectator-list">

                    <div class="clients-layout_users-title-container">
                        <h2 class="subtitle clients-layout_users-title">Spectators</h2>
                    </div>

                    @foreach (var user in Users)
                    {
                        @if (user.IsSpectator)
                        {
                            <div class="clients-layout_user-title-card">
                                <div class="user-title-card_info">
                                    <h3 class="user-title-card_name">@user.Name</h3>
                                </div>
                            </div>
                        }
                    }

                </div>

            </div>

        </div>
    }

</div>
